#所属集群名字
brokerClusterName=rocketmq-cluster
#broker 名字，注意此处不同的配置文件填写的不一样
brokerName=broker-a
#0 表示 Master， >0 表示 Slave
brokerId=0
#nameServer 地址，分号分割
namesrvAddr=rocketmq-nameserver1:9876
#在发送消息时，自动创建服务器不存在的 topic，默认创建的队列数
defaultTopicQueueNums=4
#是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭
autoCreateTopicEnable=true
#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭
autoCreateSubscriptionGroup=true
#Broker 对外服务的监听端口
listenPort=10911
#删除文件时间点，默认凌晨 4 点
deleteWhen=04
#文件保留时间，默认 48 小时
fileReservedTime=120
#commitLog 每个文件的大小默认 1G
mapedFileSizeCommitLog=1073741824
#ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整
mapedFileSizeConsumeQueue=300000
#destroyMapedFileIntervalForcibly=120000
#redeleteHangedFileInterval=120000
#检测物理文件磁盘空间
diskMaxUsedSpaceRatio=88
#存储路径
storePathRootDir=/usr/local/soft/rocketmq/store
#commitLog 存储路径
storePathCommitLog=/usr/local/soft/rocketmq/store/commitlog
#消费队列存储路径存储路径
storePathConsumeQueue=/usr/local/soft/rocketmq/store/consumequeue
#消息索引存储路径
storePathIndex=/usr/local/soft/rocketmq/store/index
#checkpoint 文件存储路径
storeCheckpoint=/usr/local/soft/rocketmq/store/checkpoint
#abort 文件存储路径
abortFile=/usr/local/soft/rocketmq/store/abort
#限制的消息大小
maxMessageSize=65536
#flushCommitLogLeastPages=4
#flushConsumeQueueLeastPages=2
#flushCommitLogThoroughInterval=10000
#flushConsumeQueueThoroughInterval=60000
#Broker 的角色
#- ASYNC_MASTER 异步复制 Master
#- SYNC_MASTER 同步双写 Master
#- SLAVE
brokerRole=ASYNC_MASTER
#刷盘方式
#- ASYNC_FLUSH 异步刷盘
#- SYNC_FLUSH 同步刷盘
flushDiskType=ASYNC_FLUSH
#checkTransactionMessageEnable=false
#发消息线程池数量
#sendMessageThreadPoolNums=128
#拉消息线程池数量
#pullMessageThreadPoolNums=128
##############ROCKETMQ启动流程########################
1.设置host映射
vim /etc/hosts
#本机ip 加上服务名称
192.168.3.10 rocketmq-nameserver1
192.168.3.10 rocketmq-master1
2.上传文件 安装rocketmq 略
3.创建软链接方便操作目录
ln -s apache-rocketmq rocketmq
4.创建文件存储路径
/store
/store/commitlog
/store/consumequeue
/store/index
5.配置文件
vim /conf/2m-2s-async/broker-a.properties
6.修改日志配置文件
mkdir -p /usr/local/soft/rocketmq/logs
#用/usr/local/soft/soft/rocketmq批量修改*.xml文件中的{user.home}
cd /usr/local/soft/rocketmq/conf/ && sed -i 's#${user.home}# /usr/local/soft/rocketmq#g' *.xml
7.修改启动脚本参数
runbroker.sh -Xms1g -Xmx1g -Xmn512m
#nameserver
runserver.sh -Xms1g -Xmx1g -Xmn512m
8.启动 NameServer
nohup sh mqnamesrv &
jps
#发现42333 NamesrvStartup 就是成功了
9.启动 brokerServer
nohup sh mqbroker -c /usr/local/soft/rocketmq/conf/2m-2s-async/broker-a.properties >/dev/null 2>& 1 &
jps
48426 BrokerStartup 说明启动成功

#文件传输
scp broker-a-s.properties 192.168.3.11/usr/local/soft/src
#slave 启动
nohup sh mqbroker -c /usr/local/soft/rocketmq/conf/2m-2s-async/broker-a-s.properties >/dev/null 2>& 1 &
#maven打包
mvn clean install -DskipTests
#启动控制台
java -jar rocketmq-console.jar --rocketmq.config.namesrvAddr='rocketmq-nameserver1:9876;rocketmq-nameserver2:9876'

#主从同步关键类和方法#
#1.同步元数据
brokerController handleSlaveSynchronize() BrokerController.this.slaveSynchronize.syncAll();

###2021.08.20 新增
0.关闭命令
  关闭namesrv服务：sh bin/mqshutdown namesrv
  关闭broker服务 ：sh bin/mqshutdown broker
1.broker 模式 默认是4个queue;
2.mq4.9 quickstart
     > nohup sh bin/mqnamesrv &
     > tail -f ~/logs/rocketmqlogs/namesrv.log
     > nohup sh bin/mqbroker -n localhost:9876 &
     > tail -f ~/logs/rocketmqlogs/broker.log
3.mvn clean package -Dmaven.test.skip=true
4.异步刷盘 PageCache
5.master slave 主备关系
commitlog 落盘到mappedFile文件
    文件名为消息大小的偏移量 每个文件大小为1G 20位10进制数字
    顺序存储
consumequeue
    存放topic
        topic 下面存放订阅的queueId
            queueId 下面是 mappedFile
为什么性能高
    mmap零拷贝
    pageCache：页缓存
    顺序存储
广播消费 offset存在consumer
集群消费 offset存在broker

Rebalance 产生的问题（集群消费）：
    queue增加：broker扩容或缩容 broker升级运维 broker与nameServer网络异常
或者 消费者增加：consumer扩容或缩容 consumer升级 consumer与nameServer异常
产生问题：消费停止 重复消费（异步提交） 消费突刺
offset 远程管理
    广播消费存在本地
    集群消费利用远程
重试队列
幂等：若某操作执行多次与执行一次对系统产生的影响是相同的，则称该操作是幂等的。
解决方案：
    幂等令牌：生产者和消费者既定协议 通常是唯一业务标识的字符串 如：订单号 流水号
    唯一性处理：服务端通过采用一定的算法策略
    1.缓存去重
解决方案举例
以支付场景为例：
1. 当支付请求到达后，首先在Redis缓存中却获取key为支付流水号的缓存value。若value不空，则
说明本次支付是重复操作，业务系统直接返回调用侧重复支付标识；若value为空，则进入下一步
操作
2. 到DBMS中根据支付流水号查询是否存在相应实例。若存在，则说明本次支付是重复操作，业务
系统直接返回调用侧重复支付标识；若不存在，则说明本次操作是首次操作，进入下一步完成唯
一性处理
3. 在分布式事务中完成三项操作：
完成支付任务
将当前支付流水号作为key，任意字符串作为value，通过set(key, value, expireTime)将数
据写入到Redis缓存
将当前支付流水号作为主键，与其它相关数据共同写入到DBMS

###Rocketmq幂等的实现#####
message.setKey("流水号")
