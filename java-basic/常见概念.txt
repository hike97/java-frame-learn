1.HashMap在jdk 1.8后引入了红黑树的概念,表示若桶中的元素个数超过8时,会自动转化成红黑树;
  若桶中元素小于等于6时,树结构还原成链表形式.
  原因:红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，
  当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要；
  链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。
2.红黑树的概念
  1、每个节点非红即黑
  2、根节点总是黑色的
  3、如果节点是红色的，则它的子节点必须是黑色的（反之不一定）
  4、每个叶子节点都是黑色的空节点（NIL节点）
  5、从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）
3.concurrenthashmap 懒加载
   而CAS操作依赖于现代处理器指令集，通过底层CMPXCHG指令实现。

